import{_ as e,c as t,o as s,a1 as a,a5 as i}from"./chunks/framework.CgL1aY5S.js";const m=JSON.parse('{"title":"Gestion de Docker","description":"","frontmatter":{},"headers":[],"relativePath":"fr/learning/docker/management.md","filePath":"fr/learning/docker/management.md"}'),n={name:"fr/learning/docker/management.md"},r=a('<h1 id="gestion-de-docker" tabindex="-1">Gestion de Docker <a class="header-anchor" href="#gestion-de-docker" aria-label="Permalink to &quot;Gestion de Docker&quot;">​</a></h1><p><img src="'+i+`" alt="docker-management"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li><strong>Image :</strong> Décrit les éléments nécessaires pour créer un programme conteneurisé (≈ programme)</li><li><strong>Conteneur :</strong> Créé à partir des images, il exécute le programme (≈ processus)</li></ul></div><h2 id="image" tabindex="-1">Image <a class="header-anchor" href="#image" aria-label="Permalink to &quot;Image&quot;">​</a></h2><h3 id="telecharger-une-image" tabindex="-1">Télécharger une image <a class="header-anchor" href="#telecharger-une-image" aria-label="Permalink to &quot;Télécharger une image&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span></span></code></pre></div><h3 id="liste-des-images-disponibles" tabindex="-1">Liste des images disponibles <a class="header-anchor" href="#liste-des-images-disponibles" aria-label="Permalink to &quot;Liste des images disponibles&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><h3 id="supprimer-une-image" tabindex="-1">Supprimer une image <a class="header-anchor" href="#supprimer-une-image" aria-label="Permalink to &quot;Supprimer une image&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rmi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">IMAGE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="conteneur" tabindex="-1">Conteneur <a class="header-anchor" href="#conteneur" aria-label="Permalink to &quot;Conteneur&quot;">​</a></h2><h3 id="lancer-un-conteneur" tabindex="-1">Lancer un conteneur <a class="header-anchor" href="#lancer-un-conteneur" aria-label="Permalink to &quot;Lancer un conteneur&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span></span></code></pre></div><ul><li><strong>Processus</strong>: <ul><li><code>docker-cli</code> demande au démon Docker de lancer un conteneur basé sur <code>ubuntu:latest</code>.</li><li>Le démon télécharge l&#39;image depuis DockerHub si elle n&#39;est pas disponible localement.</li><li>Le conteneur est lancé et produit une sortie.</li></ul></li></ul><h3 id="lister-les-conteneurs" tabindex="-1">Lister les conteneurs <a class="header-anchor" href="#lister-les-conteneurs" aria-label="Permalink to &quot;Lister les conteneurs&quot;">​</a></h3><table><thead><tr><th>Commande</th><th>Description</th></tr></thead><tbody><tr><td><code>docker container ls</code></td><td>Lister les conteneurs en fonctionnement</td></tr><tr><td><code>docker container ls --all</code></td><td>Lister tous les conteneurs</td></tr></tbody></table><h3 id="lancer-un-conteneur-1" tabindex="-1">Lancer un conteneur <a class="header-anchor" href="#lancer-un-conteneur-1" aria-label="Permalink to &quot;Lancer un conteneur&quot;">​</a></h3><table><thead><tr><th>Argument</th><th>Utilisation</th></tr></thead><tbody><tr><td><code>-it</code> ou <code>--interactive</code></td><td>Interaction avec le conteneur</td></tr><tr><td><code>-d</code> ou -<code>-detach</code></td><td>Lancer en arrière-plan</td></tr><tr><td><code>-n</code> ou <code>--name</code></td><td>Nommer le conteneur</td></tr><tr><td><code>--rm</code></td><td>Supprimer le conteneur après arrêt</td></tr><tr><td><code>-e</code></td><td>Définir une variable d&#39;environnement</td></tr><tr><td><code>-p</code></td><td>Redirection de port</td></tr><tr><td><code>--mount</code></td><td>Monter un volume sur un conteneur (type=volume,src=src_volume,dst=/path_in_container)</td></tr></tbody></table><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_ubuntu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ma_variable=bonjour_le_monde&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rediriger les ports 9200 et 9300 du container vers les ports 9201 et 9301 de la machine hôte</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9201:9200</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 9301:9300</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Avec un volume</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_ubuntu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type=volume,src=my_volume,dst=/home/my_folder</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ubuntu:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><h3 id="commandes-essentielles" tabindex="-1">Commandes essentielles <a class="header-anchor" href="#commandes-essentielles" aria-label="Permalink to &quot;Commandes essentielles&quot;">​</a></h3><table><thead><tr><th>Commande</th><th>Description</th></tr></thead><tbody><tr><td><code>docker container start &lt;ID or NAME&gt;</code></td><td>Relancer un conteneur arrêté</td></tr><tr><td><code>docker container start -a &lt;ID or NAME&gt;</code></td><td>Relancer un conteneur avec sortie standard</td></tr><tr><td><code>docker container stop &lt;ID or NAME&gt;</code></td><td>Arrêter un conteneur</td></tr><tr><td><code>docker container rm &lt;ID or NAME&gt;</code></td><td>Supprimer un conteneur</td></tr><tr><td><code>docker container prune</code></td><td>Supprimer tous les conteneurs arrêtés</td></tr><tr><td><code>docker container logs &lt;ID or NAME&gt; (-f --tail)</code></td><td>Voir les logs d&#39;un conteneur</td></tr><tr><td><code>docker container exec -it &lt;ID or NAME&gt; bash</code></td><td>Accéder au shell d&#39;un conteneur en cours d&#39;exécution</td></tr><tr><td><code>docker container inspect &lt;ID or NAME&gt;</code></td><td>Inspecter les détails d&#39;un conteneur</td></tr><tr><td><code>docker container inspect &lt;ID or NAME&gt; | grep IPAddress</code></td><td>Trouver l&#39;adresse IP du conteneur</td></tr></tbody></table><h2 id="persistence-des-donnees" tabindex="-1">Persistence des données <a class="header-anchor" href="#persistence-des-donnees" aria-label="Permalink to &quot;Persistence des données&quot;">​</a></h2><table><thead><tr><th>Commande</th><th>Description</th></tr></thead><tbody><tr><td><code>docker volume create --name &lt;VOLUME&gt;</code></td><td>Créer un volume</td></tr><tr><td><code>docker volume ls</code></td><td>Lister les volumes</td></tr><tr><td><code>docker volume inspect &lt;VOLUME&gt;</code></td><td>Inspecter un volume</td></tr><tr><td><code>docker volume rm &lt;VOLUME&gt;</code></td><td>Supprimer un volume</td></tr><tr><td><code>docker volume ls -f dangling=true</code></td><td>Lister tous les volumes en suspens</td></tr><tr><td><code>docker volume prune</code></td><td>Supprimer tous les volumes en suspens</td></tr></tbody></table><h2 id="nettoyage-systeme" tabindex="-1">Nettoyage système <a class="header-anchor" href="#nettoyage-systeme" aria-label="Permalink to &quot;Nettoyage système&quot;">​</a></h2><table><thead><tr><th>Commande</th><th>Description</th></tr></thead><tbody><tr><td><code>docker system prune</code></td><td>Nettoyer Docker (conteneurs arrêtés, réseaux, images non référencées et caches de build)</td></tr><tr><td><code>docker system prune -f</code></td><td>Forcer la suppression sans confirmation</td></tr><tr><td><code>docker system prune --volumes</code></td><td>Inclure les volumes dans le nettoyage</td></tr></tbody></table>`,25),d=[r];function l(o,h,c,p,k,u){return s(),t("div",null,d)}const F=e(n,[["render",l]]);export{m as __pageData,F as default};
