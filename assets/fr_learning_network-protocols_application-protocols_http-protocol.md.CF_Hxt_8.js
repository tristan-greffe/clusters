import{_ as e,c as t,o as s,a1 as o,aM as r,aN as n,aO as a,aP as i}from"./chunks/framework.CgL1aY5S.js";const q=JSON.parse('{"title":"Le protocole HTTP(s)","description":"","frontmatter":{},"headers":[],"relativePath":"fr/learning/network-protocols/application-protocols/http-protocol.md","filePath":"fr/learning/network-protocols/application-protocols/http-protocol.md"}'),d={name:"fr/learning/network-protocols/application-protocols/http-protocol.md"},c=o('<h1 id="le-protocole-http-s" tabindex="-1">Le <code>protocole HTTP(s)</code> <a class="header-anchor" href="#le-protocole-http-s" aria-label="Permalink to &quot;Le `protocole HTTP(s)`&quot;">​</a></h1><p>Le <code>protocole HTTP</code> (HyperText Transfer Protocol) est le fondement de toute communication sur le Web. Il définit <strong>comment les messages sont formatés et transmis</strong>, La <strong>version sécurisée de <code>HTTP</code> est appelée <code>HTTPS</code></strong> (HyperText Transfer Protocol Secure), qui ajoute une couche de <strong>chiffrement via TLS</strong> (Transport Layer Security).</p><div class="info custom-block"><p class="custom-block-title">Agents Utilisateurs (User Agents)</p><p>Les agents utilisateurs sont <strong>les applications qui envoient des requêtes HTTP</strong>, les plus courantes étant les navigateurs web (Curl, Chrome, Firefox, Safari, etc.). Un agent utilisateur est identifié par l&#39;en-tête User-Agent dans les requêtes HTTP, qui fournit des informations sur le logiciel, la version et souvent le système d&#39;exploitation.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Pour passer de HTTP à HTTPS, un certificat SSL/TLS est nécessaire. Ce certificat peut être obtenu auprès d&#39;une Autorité de Certification (CA) et installé sur le serveur.</p></div><div class="info custom-block"><p class="custom-block-title">stateless</p><p>HTTP est un protocole sans état (stateless), ce qui signifie que chaque requête est indépendante et n&#39;a aucune connaissance des requêtes précédentes. Pour gérer les sessions utilisateur, des techniques comme les cookies, les sessions côté serveur et les jetons (tokens) sont utilisés.</p></div><h2 id="fonctionnement" tabindex="-1">Fonctionnement <a class="header-anchor" href="#fonctionnement" aria-label="Permalink to &quot;Fonctionnement&quot;">​</a></h2><p><code>HTTP</code> fonctionne sur un <strong>modèle client-serveur</strong>. Un client (comme un navigateur web) envoie une demande à un serveur web qui héberge un site web, et le serveur renvoie une réponse. Les interactions <code>HTTP</code> sont <strong>sans état (stateless)</strong>, ce qui signifie que chaque demande est indépendante et que le serveur ne conserve aucune information d&#39;état entre les demandes successives.</p><h3 id="http-1-0" tabindex="-1">HTTP/1.0 <a class="header-anchor" href="#http-1-0" aria-label="Permalink to &quot;HTTP/1.0&quot;">​</a></h3><p>Première version majeure, introduite en 1996.<strong>Chaque transaction nécessite une nouvelle connexion TCP</strong>, ce qui le rend inefficace pour des pages contenant plusieurs éléments (images, scripts, etc.).</p><p><img src="'+r+'" alt="http1.0-protocol"></p><h3 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h3><p>Publiée en 1997, c&#39;est la version la plus largement utilisée pendant de nombreuses années.</p><p><img src="'+n+'" alt="http1.1-protocol"></p><table><thead><tr><th>Caractéristique</th><th>Description</th></tr></thead><tbody><tr><td><strong>Connexions persistantes</strong></td><td>Permet à une seule connexion <code>TCP</code> d&#39;être utilisée pour plusieurs requêtes/réponses.</td></tr><tr><td><strong>Pipelining</strong></td><td>Permet d&#39;envoyer plusieurs requêtes sans attendre les réponses, bien que rarement utilisé en pratique en raison de problèmes de compatibilité.</td></tr><tr><td><strong>Gestion de cache améliorée</strong></td><td>En-têtes comme Cache-Control pour un meilleur contrôle du cache.</td></tr><tr><td><strong>Compression des en-têtes</strong></td><td>Utilisation d&#39;algorithmes comme gzip pour réduire la taille des données échangées.</td></tr></tbody></table><h3 id="http-2" tabindex="-1">HTTP/2 <a class="header-anchor" href="#http-2" aria-label="Permalink to &quot;HTTP/2&quot;">​</a></h3><p>Publiée en 2015, cette version <strong>vise à améliorer les performances</strong>.</p><p><img src="'+a+'" alt="http2-protocol"></p><table><thead><tr><th>Caractéristique</th><th>Description</th></tr></thead><tbody><tr><td><strong>Multiplexage</strong></td><td>Permet de multiples requêtes et réponses simultanées sur une seule connexion <code>TCP</code>.</td></tr><tr><td><strong>Compression des en-têtes</strong></td><td>Utilisation de HPACK pour compresser les en-têtes <code>HTTP</code>, réduisant ainsi la latence.</td></tr><tr><td><strong>Push du serveur</strong></td><td>Permet au serveur d&#39;envoyer des ressources au client de manière proactive.</td></tr><tr><td><strong>Frames binaires</strong></td><td>Les données sont encapsulées dans des cadres binaires, ce qui rend la communication plus efficace.</td></tr></tbody></table><h3 id="http-3" tabindex="-1">HTTP/3 <a class="header-anchor" href="#http-3" aria-label="Permalink to &quot;HTTP/3&quot;">​</a></h3><p>Basée sur le protocole <code>QUIC</code> de Google, cette version est encore <strong>plus performante et sécurisée</strong>.</p><p><img src="'+i+'" alt="http3-protocol"></p><table><thead><tr><th>Caractéristique</th><th>Description</th></tr></thead><tbody><tr><td><strong>Utilisation de QUIC</strong></td><td>HTTP/3 utilise <code>QUIC</code> au lieu de <code>TCP</code>, apportant des améliorations en termes de latence et de résilience aux pertes de paquets.</td></tr><tr><td><strong>Connexions indépendantes de la couche transport</strong></td><td>Réduire les temps de connexion et améliorer les performances.</td></tr><tr><td><strong>Amélioration de la sécurité</strong></td><td><code>QUIC</code> intègre directement <code>TLS</code>, garantissant une meilleure sécurité et une négociation plus rapide.</td></tr></tbody></table><h2 id="composants-d-une-requete-http" tabindex="-1">Composants d&#39;une requête <code>HTTP</code> <a class="header-anchor" href="#composants-d-une-requete-http" aria-label="Permalink to &quot;Composants d&#39;une requête `HTTP`&quot;">​</a></h2><table><thead><tr><th>Composant</th><th>Description</th></tr></thead><tbody><tr><td><strong>Méthode</strong></td><td>La méthode HTTP indique l&#39;action à effectuer (GET, POST, PUT, DELETE, etc.).</td></tr><tr><td><strong>URL</strong></td><td>L&#39;adresse de la ressource sur le serveur.</td></tr><tr><td><strong>Version HTTP</strong></td><td>La version du protocole utilisée (1.0, 1.1, 2, 3).</td></tr><tr><td><strong>En-têtes</strong></td><td>Métadonnées supplémentaires pour la requête ou la réponse (ex : Content-Type, User-Agent).</td></tr><tr><td><strong>Corps</strong></td><td>Données envoyées avec la requête (généralement utilisé avec les méthodes POST et PUT).</td></tr></tbody></table><h2 id="methodes-http" tabindex="-1">Méthodes <code>HTTP</code> <a class="header-anchor" href="#methodes-http" aria-label="Permalink to &quot;Méthodes `HTTP`&quot;">​</a></h2><table><thead><tr><th>Méthode</th><th>Description</th></tr></thead><tbody><tr><td><strong>GET</strong></td><td>Récupère des données d&#39;un serveur.</td></tr><tr><td><strong>POST</strong></td><td>Envoie des données au serveur.</td></tr><tr><td><strong>PUT</strong></td><td>Met à jour une ressource existante ou en crée une nouvelle.</td></tr><tr><td><strong>DELETE</strong></td><td>Supprime une ressource existante.</td></tr><tr><td><strong>HEAD</strong></td><td>Similaire à GET mais ne récupère que les en-têtes.</td></tr><tr><td><strong>OPTIONS</strong></td><td>Décrit les options de communication pour la ressource cible.</td></tr><tr><td><strong>PATCH</strong></td><td>Applique des modifications partielles à une ressource.</td></tr></tbody></table>',26),l=[c];function u(p,h,m,g,T,P){return s(),t("div",null,l)}const f=e(d,[["render",u]]);export{q as __pageData,f as default};
