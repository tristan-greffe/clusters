import{_ as e,c as n,o as t,a1 as o,b7 as r,b8 as s}from"./chunks/framework.CgL1aY5S.js";const v=JSON.parse('{"title":"Le protocole TCP","description":"","frontmatter":{},"headers":[],"relativePath":"fr/learning/network-protocols/transport-protocols/tcp-protocol.md","filePath":"fr/learning/network-protocols/transport-protocols/tcp-protocol.md"}'),i={name:"fr/learning/network-protocols/transport-protocols/tcp-protocol.md"},a=o('<h1 id="le-protocole-tcp" tabindex="-1">Le <code>protocole TCP</code> <a class="header-anchor" href="#le-protocole-tcp" aria-label="Permalink to &quot;Le `protocole TCP`&quot;">​</a></h1><p>Le <code>protocole TCP</code> (Transmission Control Protocol) permet d&#39;<strong>établir une communication bidirectionnelle fiable entre deux machines</strong>. Il garantit la livraison correcte de toutes les informations envoyées d&#39;une machine à l&#39;autre en utilisant des numéros de séquence initiaux (ISN) et des ports pour identifier les connexions.</p><div class="info custom-block"><p class="custom-block-title">Segment TCP ou paquet TCP</p><p>Un segment TCP (ou paquet TCP) comprend l&#39;en-tête du <code>protocole d&#39;application</code> avec des informations supplémentaires (numéros de séquence, ports, etc.) et les données. C&#39;est ce qui est envoyé au <code>protocole IP</code>.</p></div><div class="info custom-block"><p class="custom-block-title">Les ports</p><p>Les ports agissent comme des portes sur un serveur. Il existe 65 536 ports possibles, de 0 à 65 535. Les <code>protocoles d&#39;application</code> attribuent souvent des ports par défaut, par exemple, HTTP = 80, HTTPS = 443, SSH = 22.</p></div><h2 id="etablir-une-connexion-three-way-handshake" tabindex="-1">Établir une connexion (three-way handshake) <a class="header-anchor" href="#etablir-une-connexion-three-way-handshake" aria-label="Permalink to &quot;Établir une connexion (three-way handshake)&quot;">​</a></h2><p><img src="'+r+'" alt="tcp-protocol-connection"></p><h3 id="premiere-etape-syn-synchronize-sequence-numbers" tabindex="-1">Première étape : SYN (Synchronize Sequence Numbers) <a class="header-anchor" href="#premiere-etape-syn-synchronize-sequence-numbers" aria-label="Permalink to &quot;Première étape : SYN (Synchronize Sequence Numbers)&quot;">​</a></h3><p>La première étape est la synchronisation. Lorsqu&#39;un client souhaite établir une connexion avec un serveur, il <strong>envoie un paquet SYN (Synchronisation) avec son numéro de séquence initial (ISN)</strong>.</p><ol><li>Le client génère un numéro de séquence initial (ISN) = X.</li><li>Il envoie le numéro de séquence initial (ISN) X au serveur.</li><li>Le client passe à l&#39;état <code>SYN_SENT</code>, indiquant qu&#39;il a envoyé la requête initiale.</li></ol><h3 id="deuxieme-etape-syn-acknowledgment" tabindex="-1">Deuxième étape : SYN-ACKnowledgment <a class="header-anchor" href="#deuxieme-etape-syn-acknowledgment" aria-label="Permalink to &quot;Deuxième étape : SYN-ACKnowledgment&quot;">​</a></h3><p>À la réception du paquet SYN, le serveur <strong>accuse réception en renvoyant un paquet SYN-ACK (Synchronize-Acknowledge)</strong>. Cela signifie que le serveur est prêt à communiquer et accuse réception du numéro de séquence du client. Le serveur génère également son propre numéro de séquence initial.</p><ol start="4"><li>Le serveur génère un numéro de séquence initial (ISN) = Y.</li><li>Le serveur envoie son numéro de séquence initial (ISN) Y ainsi que le numéro de séquence initial (ISN) X + 1 du client.</li><li>Le serveur passe à l&#39;état <code>SYN_RECEIVED</code>, indiquant qu&#39;il a bien reçu la demande de connexion et a envoyé les informations nécessaires pour établir la connexion.</li></ol><h3 id="troisieme-etape-acknowledgment" tabindex="-1">Troisième étape : ACKnowledgment <a class="header-anchor" href="#troisieme-etape-acknowledgment" aria-label="Permalink to &quot;Troisième étape : ACKnowledgment&quot;">​</a></h3><p>Enfin, le client répond à l&#39;accusé de réception du serveur en <strong>envoyant un paquet ACK (Acknowledge)</strong>. Ce paquet confirme la réception de l&#39;accusé de réception du serveur et reconnaît le numéro de séquence du serveur. Une fois cet échange terminé, la <strong>connexion est établie</strong> et les deux appareils sont prêts à échanger des données de manière fiable.</p><ol start="7"><li>Le client envoie au serveur le numéro de séquence initial (ISN) du serveur Y + 1 ainsi qu&#39;un flag ACK.</li><li>Le client et le serveur passent à l&#39;état <code>ESTABLISHED</code>.</li></ol><h2 id="transmission-des-donnees" tabindex="-1">Transmission des données <a class="header-anchor" href="#transmission-des-donnees" aria-label="Permalink to &quot;Transmission des données&quot;">​</a></h2><p>Une fois la connexion établie, <strong>le client et le serveur utilisent leurs numéros de séquence initiaux (ISN X et ISN Y) pour envoyer des données</strong>. Ces numéros sont incrémentés au fur et à mesure de la transmission des données et servent également à vérifier que toutes les données ont bien été reçues.</p><div class="tip custom-block"><p class="custom-block-title">Exemple</p><p>si le client envoie des données de 3 octets, il enverra alors son numéro de séquence initial (ISN) X + 3.</p></div><h2 id="en-tete-tcp" tabindex="-1">En-tête TCP <a class="header-anchor" href="#en-tete-tcp" aria-label="Permalink to &quot;En-tête TCP&quot;">​</a></h2><p><img src="'+s+'" alt="tcp-protocol-header"></p><ol><li><strong>Source Port</strong> : Port source de la connexion, attribué par le <code>protocole d&#39;application</code>.</li><li><strong>Destination Port</strong> : Port de destination de la connexion.</li><li><strong>Sequence Number</strong> : Numéro de séquence relatif à l&#39;ISN.</li><li><strong>Acknowledgment Number</strong> : Numéro d&#39;accusé de réception relatif à l&#39;ISN.</li><li><strong>Window</strong> : Taille de la fenêtre, ajuste le volume d&#39;information pouvant transiter.</li><li><strong>Checksum</strong> : Permet de vérifier l&#39;intégrité de l&#39;en-tête. C&#39;est un hash de toutes les propriétés de l&#39;en-tête, et si une propriété est modifiée, le paquet est rejeté.</li></ol><p>Si le paquet TCP est trop gros, il est fragmenté.</p><ol start="7"><li><strong>Data Offset</strong> : Indique le début des données dans le segment.</li><li><strong>Reserved</strong> : Champ réservé pour des usages futurs.</li><li><strong>Flags</strong> : Indiquent le statut du paquet, par exemple, s&#39;il peut être fragmenté et si d&#39;autres fragments suivent.</li></ol>',23),l=[a];function c(u,d,p,m,h,g){return t(),n("div",null,l)}const f=e(i,[["render",c]]);export{v as __pageData,f as default};
