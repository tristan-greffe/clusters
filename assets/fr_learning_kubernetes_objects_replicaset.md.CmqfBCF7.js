import{_ as s,D as o,c as n,j as e,I as a,a as r,a1 as i,o as d,az as c}from"./chunks/framework.CgL1aY5S.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fr/learning/kubernetes/objects/replicaset.md","filePath":"fr/learning/kubernetes/objects/replicaset.md"}'),l={name:"fr/learning/kubernetes/objects/replicaset.md"},p={id:"",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#","aria-label":`Permalink to "<KubernetesIcon icon='/clusters/learning/kubernetes/icons/rs.svg' label='ReplicaSet' :width='45' :height='45' />"`},"​",-1),m=i('<p>Un <a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/" target="_blank" rel="noreferrer">ReplicaSet</a> est un objet Kubernetes qui <strong>garantit la disponibilité d&#39;un nombre spécifié de copies (réplicas) d&#39;un pod</strong>. Il assure la redondance et la haute disponibilité des pods au sein d&#39;un cluster.</p><h2 id="fonctionnement" tabindex="-1">Fonctionnement <a class="header-anchor" href="#fonctionnement" aria-label="Permalink to &quot;Fonctionnement&quot;">​</a></h2><p>Si un pod tombe en panne ou est supprimé, le <code>ReplicaSet</code> crée automatiquement un nouveau pod pour maintenir le nombre souhaité de réplicas. Cela garantit que l&#39;application continue de fonctionner même en cas de défaillance de certains pods.</p><p><img src="'+c+'" alt="replicaset"></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Un <code>ReplicaSet</code> est lié à ses pods via le champ <code>metadata.ownerReferences</code> des pods, ce qui permet au <code>ReplicaSet</code> de savoir quels pods lui appartiennent</p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Un <code>ReplicaSet</code> est souvent créé par un objet <code>Deployment</code>, ce qui facilite la gestion des versions et les mises à jour progressives des applications</p></div><h2 id="deployment-vs-replicaset" tabindex="-1"><code>Deployment</code> vs <code>ReplicaSet</code> <a class="header-anchor" href="#deployment-vs-replicaset" aria-label="Permalink to &quot;`Deployment` vs `ReplicaSet`&quot;">​</a></h2><table><thead><tr><th><code>Deployment</code></th><th><code>ReplicaSet</code></th></tr></thead><tbody><tr><td>Abstraction de haut niveau qui gère les ensembles de répliques.</td><td>Abstraction de niveau inférieur qui gère le nombre souhaité de répliques d&#39;un pod.</td></tr><tr><td>Fournit des fonctionnalités supplémentaires telles que les mises à jour progressives, les retours en arrière et la gestion des versions de l&#39;application.</td><td>Fournit des mécanismes de base de mise à l&#39;échelle et d&#39;auto-réparation.</td></tr><tr><td>Gère un modèle de pods et utilise des <code>ReplicaSet</code> pour s&#39;assurer que le nombre spécifié de répliques du pod est en cours d&#39;exécution.</td><td>Ne gère que le nombre souhaité de répliques d&#39;un pod.</td></tr><tr><td>Permet les mises à jour et les retours en arrière de l&#39;application, facilitant des mises à jour transparentes et réduisant les temps d&#39;arrêt.</td><td>Les applications doivent être mises à jour ou annulées manuellement.</td></tr><tr><td>Fournit une version de l&#39;application, ce qui permet de gérer plusieurs versions de la même application et de revenir à une version antérieure si nécessaire.</td><td>N&#39;offre pas de fonctionnalité de gestion de versions.</td></tr></tbody></table>',8);function b(h,_,f,v,g,q){const t=o("KubernetesIcon");return d(),n("div",null,[e("h1",p,[a(t,{icon:"/clusters/learning/kubernetes/icons/rs.svg",label:"ReplicaSet",width:45,height:45}),r(),u]),m])}const R=s(l,[["render",b]]);export{S as __pageData,R as default};
