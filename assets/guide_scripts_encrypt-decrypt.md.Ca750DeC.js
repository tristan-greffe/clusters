import{_ as e,c as t,o as a,a1 as s}from"./chunks/framework.BwTyoF0R.js";const f=JSON.parse('{"title":"Operations","description":"","frontmatter":{},"headers":[],"relativePath":"guide/scripts/encrypt-decrypt.md","filePath":"guide/scripts/encrypt-decrypt.md"}'),i={name:"guide/scripts/encrypt-decrypt.md"},c=s('<h1 id="operations" tabindex="-1">Operations <a class="header-anchor" href="#operations" aria-label="Permalink to &quot;Operations&quot;">​</a></h1><h2 id="scripts" tabindex="-1">Scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;Scripts&quot;">​</a></h2><h3 id="encrypt-decrypt" tabindex="-1">Encrypt / Decrypt <a class="header-anchor" href="#encrypt-decrypt" aria-label="Permalink to &quot;Encrypt / Decrypt&quot;">​</a></h3><h4 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h4><p>Wrappers around sops to encrypt/decrypt files. These scripts take only one parameter: the file to encrypt for <code>./scripts/encrypt.sh</code> and the file to decrypt for <code>./scripts/decrypt.sh</code>. The wrappers will create an encrypted/decrypted file named as the source file with <code>.enc</code> (or <code>.dec</code>) inserted between the filename and the extension. No assumptions are made about the input file name conventions.</p><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><p>To encrypt:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./scripts/encrypt.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path/to/file.yaml</span></span></code></pre></div><p>Will encrypt <code>path/to/file.yaml</code> to <code>path/to/file.enc.yaml</code></p><p>To decrypt:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./scripts/decrypt.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path/to/file.enc.conf</span></span></code></pre></div><p>Will decrypt <code>path/to/file.enc.conf</code> to <code>path/to/file.dec.conf</code></p><h3 id="update-secrets" tabindex="-1">Update Secrets <a class="header-anchor" href="#update-secrets" aria-label="Permalink to &quot;Update Secrets&quot;">​</a></h3><h4 id="description-1" tabindex="-1">Description <a class="header-anchor" href="#description-1" aria-label="Permalink to &quot;Description&quot;">​</a></h4><p>This helper command updates the secret files (all matching <code>*.enc.*</code>) to reflect changes in the list of recipients in a project&#39;s <code>.sops.yaml</code> file (i.e., the list of allowed public keys).</p><h4 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-label="Permalink to &quot;Usage&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./scripts/update-secrets.sh</span></span></code></pre></div><p>This will update all secret files in the <code>clusters</code> project.</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>Do not use this command to update secrets after editing a secret file, as you will lose your modifications. Instead, use <code>./scripts/decrypt.sh</code> to encrypt the updated decrypted file.</p></div><h2 id="adding-a-new-developer" tabindex="-1">Adding a New Developer <a class="header-anchor" href="#adding-a-new-developer" aria-label="Permalink to &quot;Adding a New Developer&quot;">​</a></h2><p>To grant a new developer access, add their public key to the <code>.sops.yaml</code> file. This file lists path regexes indicating for each path the recipients (allowed developers) to use when encrypting a file located in the matching path.</p>',21),o=[c];function r(p,n,d,l,h,u){return a(),t("div",null,o)}const g=e(i,[["render",r]]);export{f as __pageData,g as default};
