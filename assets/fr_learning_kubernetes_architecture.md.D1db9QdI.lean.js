import{_ as a,D as o,c as l,j as e,I as n,a as s,a1 as r,a8 as i,a9 as c,aa as u,o as d,ab as h,ac as p}from"./chunks/framework.CgL1aY5S.js";const z=JSON.parse(`{"title":"L'architecture de Kubernetes","description":"","frontmatter":{},"headers":[],"relativePath":"fr/learning/kubernetes/architecture.md","filePath":"fr/learning/kubernetes/architecture.md"}`),m={name:"fr/learning/kubernetes/architecture.md"},_=r("",4),b={id:"-1",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#-1","aria-label":`Permalink to "<KubernetesIcon icon='/clusters/learning/kubernetes/icons/control-plane.svg' label='Control Plane' :width='45' :height='45' />"`},"​",-1),k=e("p",null,[s("Le "),e("strong",null,"control plane surveille l'ensemble du cluster"),s(", redémarrant les pods non sains, mettant à l'échelle les applications et planifiant les tâches selon les besoins.")],-1),f=e("h3",{id:"composants",tabindex:"-1"},[s("Composants "),e("a",{class:"header-anchor",href:"#composants","aria-label":'Permalink to "Composants"'},"​")],-1),v=e("p",null,[e("img",{src:i,alt:"control-plane-architecture"})],-1),C=e("thead",null,[e("tr",null,[e("th",null,"Composant"),e("th",null,"Description")])],-1),x=e("td",null,"Point de terminaison de l'API REST pour interagir avec le plan de contrôle Kubernetes",-1),I=e("td",null,"Système de base de données (clés/valeurs) pour les données du cluster. Stocke les éléments de configuration et l'état de chaque node et pod. Permet de revenir à un état antérieur, agissant comme la mémoire de sauvegarde du cluster",-1),P=e("td",null,"Surveille les nouvelles charges de travail (pods) et les affecte à une node en fonction de divers facteurs de planification (contraintes de ressources, règles d'anti-affinité, localité des données, etc.)",-1),w=e("td",null,"Contrôleur central qui surveille les nodes, les ensembles de réplication, les points de terminaison (services) et les comptes de service",-1),q=e("td",null,"Interagit avec le fournisseur de cloud sous-jacent (OVH, AWS, etc.)",-1),T=e("h3",{id:"la-haute-disponibilite-de-kubernetes",tabindex:"-1"},[s("La haute disponibilité de Kubernetes "),e("a",{class:"header-anchor",href:"#la-haute-disponibilite-de-kubernetes","aria-label":'Permalink to "La haute disponibilité de Kubernetes"'},"​")],-1),K=e("p",null,[e("img",{src:c,alt:"ha-architecture"})],-1),S=e("p",null,[s("La "),e("strong",null,"haute disponibilité de Kubernetes (HA)"),s(" évite les points de défaillance unique en répliquant les composants clés comme le kube-apiserver, le controller manager et etcd sur plusieurs nodes masters. Ainsi, même si un control plane tombe en panne dans un cluster multi-master (généralement trois nodes), les autres maintiennent le cluster opérationnel.")],-1),y={id:"-2",tabindex:"-1"},A=e("a",{class:"header-anchor",href:"#-2","aria-label":`Permalink to "<KubernetesIcon icon='/clusters/learning/kubernetes/icons/node.svg' label='Node Worker' :width='45' :height='45' />"`},"​",-1),L=e("h3",{id:"composants-1",tabindex:"-1"},[s("Composants "),e("a",{class:"header-anchor",href:"#composants-1","aria-label":'Permalink to "Composants"'},"​")],-1),O=e("p",null,"Contrairement aux composants des nodes masters qui s'exécutent généralement sur une seule node master (sauf en configuration haute disponibilité), les composants des nodes workers s'exécutent sur l'ensemble des nodes Workers.",-1),N=e("p",null,[e("img",{src:u,alt:"node-architecture"})],-1),V=e("thead",null,[e("tr",null,[e("th",null,"Composant"),e("th",null,"Description")])],-1),D=e("td",null,"Agent s'exécutant sur le node Worker pour inspecter la santé des conteneurs et faire rapport aux masters. Il est également chargé d'écouter les nouvelles commandes du kube-apiserver et de les appliquer sur la node où il est installé",-1),R=e("td",null,"Composant chargé de gérer le trafic réseau au sein du cluster",-1),W=e("tr",null,[e("td",null,"container runtime"),e("td",null,"Couche qui permet d'exécuter les conteneurs (Docker, rkt, runc)")],-1),E=r("",3);function $(B,j,G,H,F,J){const t=o("KubernetesIcon");return d(),l("div",null,[_,e("h2",b,[n(t,{icon:"/clusters/learning/kubernetes/icons/control-plane.svg",label:"Control Plane",width:45,height:45}),s(),g]),k,f,v,e("table",null,[C,e("tbody",null,[e("tr",null,[e("td",null,[n(t,{icon:"/clusters/learning/kubernetes/icons/api.svg",label:"kube-apiserver",width:35,height:35})]),x]),e("tr",null,[e("td",null,[n(t,{icon:"/clusters/learning/kubernetes/icons/etcd.svg",label:"etcd",width:35,height:35})]),I]),e("tr",null,[e("td",null,[n(t,{icon:"/clusters/learning/kubernetes/icons/sched.svg",label:"kube-scheduler",width:35,height:35})]),P]),e("tr",null,[e("td",null,[n(t,{icon:"/clusters/learning/kubernetes/icons/c-m.svg",label:"kube-controller-manager",width:35,height:35})]),w]),e("tr",null,[e("td",null,[n(t,{icon:"/clusters/learning/kubernetes/icons/c-c-m.svg",label:"cloud-controller-manager",width:35,height:35})]),q])])]),T,K,S,e("h2",y,[n(t,{icon:"/clusters/learning/kubernetes/icons/node.svg",label:"Node Worker",width:45,height:45}),s(),A]),L,O,N,e("table",null,[V,e("tbody",null,[e("tr",null,[e("td",null,[n(t,{icon:"/clusters/learning/kubernetes/icons/kubelet.svg",label:"kubelet",width:35,height:35})]),D]),e("tr",null,[e("td",null,[n(t,{icon:"/clusters/learning/kubernetes/icons/k-proxy.svg",label:"kube-proxy",width:35,height:35})]),R]),W])]),E])}const M=a(m,[["render",$]]);export{z as __pageData,M as default};
