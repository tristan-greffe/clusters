import{_ as t,D as i,c as a,j as s,I as n,a as r,a1 as l,o,ar as d}from"./chunks/framework.CgL1aY5S.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"fr/learning/kubernetes/objects/ingress.md","filePath":"fr/learning/kubernetes/objects/ingress.md"}'),p={name:"fr/learning/kubernetes/objects/ingress.md"},h={id:"",tabindex:"-1"},c=s("a",{class:"header-anchor",href:"#","aria-label":`Permalink to "<KubernetesIcon icon='/clusters/learning/kubernetes/icons/ing.svg' label='Ingress' :width='45' :height='45' />"`},"​",-1),k=l('<p>Un <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noreferrer">Ingress</a> permet de <strong>gérer les configurations de routage DNS</strong> et d&#39;<strong>exposer des services HTTP ou HTTPS à l&#39;extérieur du cluster</strong>. Il utilise un <a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/" target="_blank" rel="noreferrer">Ingress Controller</a> pour lire et appliquer les règles de routage définies dans les objets <code>Ingress</code> stockés dans <code>etcd</code>.</p><div class="info custom-block"><p class="custom-block-title"><code>Ingress Controller</code></p><p>Un Ingress Controller (comme Traefik, Nginx, HAProxy, etc.) est un composant qui <strong>applique les règles de routage DNS</strong> spécifiées via les ressources Ingress. Il agit comme un proxy inverse et un équilibreur de charge.</p></div><div class="info custom-block"><p class="custom-block-title"><code>Ingress Class</code></p><p>L&#39;Ingress Class permet de spécifier quel Ingress Controller doit implémenter un Ingress particulier. Cela permet de définir plusieurs Ingress Controllers dans le même cluster et de <strong>spécifier quel controller doit gérer quel Ingress</strong>.</p></div><h2 id="fonctionnalites" tabindex="-1">Fonctionnalités <a class="header-anchor" href="#fonctionnalites" aria-label="Permalink to &quot;Fonctionnalités&quot;">​</a></h2><ul><li><strong>Exposer une IP pour accéder au cluster</strong> : Rendre une application web accessible depuis Internet via une ou plusieurs URL.</li><li><strong>Gérer différents paths en fonction des hosts</strong> : Acheminer le trafic vers les services appropriés selon les règles de routage définies</li><li><strong>Gérer différents hosts (virtuels)</strong> : Héberger plusieurs sites ou applications sur une même adresse IP</li><li><strong>Gérer les terminaisons TLS</strong> : Assurer le chiffrement des communications HTTPS pour sécuriser les échanges</li></ul><h2 id="fonctionnement" tabindex="-1">Fonctionnement <a class="header-anchor" href="#fonctionnement" aria-label="Permalink to &quot;Fonctionnement&quot;">​</a></h2><p><img src="'+d+`" alt="ingress"></p><ol><li><strong>Définition</strong>: Un fichier YAML spécifie l&#39;ingress</li><li><strong>Création</strong>: <strong>kubectl</strong> traduit le fichier YAML en requêtes HTTP REST et les envoie au <code>kube-apiserver</code></li><li><strong>Traitement par le <code>kube-apiserver</code></strong>: Le <code>kube-apiserver</code> valide et stocke la configuration de l&#39;ingress dans <code>etcd</code></li><li><strong>Reception de la Requête</strong>: Une requête HTTP(s) est envoyée à l&#39;Ingress depuis un client externe (navigateur web, application)</li><li><strong>Récupération des Configurations</strong>: L&#39;Ingress Controller surveille continuellement les ressources Ingress stockées dans etcd. Il extrait les configurations pertinentes, y compris les règles de routage définies dans les fichiers YAML</li><li><strong>Conversion en Règles de Routage</strong>: Ces configurations sont ensuite converties en règles de routage compréhensibles par le proxy inverse (comme NGINX ou Traefik). Cela inclut les mappages d&#39;URL, les conditions de routage basées sur les chemins et les hôtes, ainsi que les configurations TLS.</li><li><strong>Comparaison des Règles</strong>: L&#39;Ingress Controller&#39; reçoit la requête et compare l&#39;URL (domaine) avec les règles spécifiées dans la ressource Ingress</li><li><strong>Sélection du Backend</strong>: Si une correspondance est trouvée, le controller détermine quel service backend doit traiter la requête en fonction des règles. Si aucune correspondance n&#39;est trouvée, la requête peut être redirigée vers un backend par défaut ou rejetée.</li><li><strong>Routage</strong>: Si la requête correspond à une règle, le controller la transmet au service approprié</li><li><strong>Transmission au Pod</strong>: Le service reçoit la requête et la transmet au Pod approprié en fonction de sa configuration</li><li><strong>Traitement de la Requête</strong>: Le Pod gère la requête, traite les données, et renvoie une réponse qui suit le même chemin inversé jusqu&#39;au client externe</li></ol><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">apiVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">networking.k8s.io/v1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">metadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example-ingress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  annotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nginx.ingress.kubernetes.io/rewrite-target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  defaultBackend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      apiGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">k8s.example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">StorageBucket</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">static-assets</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  ingressClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nginx-example</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">example.com</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      paths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/testpath</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        pathType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Prefix</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        backend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">test</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">            port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">              number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span></span></code></pre></div><h3 id="explication-des-champs" tabindex="-1">Explication des champs <a class="header-anchor" href="#explication-des-champs" aria-label="Permalink to &quot;Explication des champs&quot;">​</a></h3><table><thead><tr><th>Champ</th><th>Description</th></tr></thead><tbody><tr><td><strong>annotations</strong></td><td>Chaque annotation est spécifique au controller utilisé. Dans cet exemple, elle indique à NGINX de réécrire l&#39;URL de toutes les demandes entrantes à <code>/</code> avant de les acheminer vers le service, établissant une règle de réécriture d&#39;URL.</td></tr><tr><td><strong>defaultBackend</strong></td><td>Un backend par défaut est un service qui gère toutes les demandes qui ne correspondent à aucune règle dans la ressource Ingress.</td></tr><tr><td><strong>rules</strong></td><td>Les règles de routage.</td></tr><tr><td><strong>host</strong></td><td>Le routage basé sur l&#39;hôte. Si l&#39;URL ne correspond pas, la demande ne sera pas acheminée vers les services.</td></tr></tbody></table><h3 id="types-de-chemin-path-type" tabindex="-1">Types de chemin (Path type) <a class="header-anchor" href="#types-de-chemin-path-type" aria-label="Permalink to &quot;Types de chemin (Path type)&quot;">​</a></h3><table><thead><tr><th>Type</th><th>Path</th><th>Request path</th><th>Correspondance</th></tr></thead><tbody><tr><td>Prefix</td><td>/</td><td>(tous chemins)</td><td>Oui</td></tr><tr><td>Exact</td><td>/foo</td><td>/foo</td><td>Oui</td></tr><tr><td>Exact</td><td>/foo</td><td>/bar</td><td>Non</td></tr><tr><td>Exact</td><td>/foo</td><td>/foo/</td><td>Non</td></tr><tr><td>Exact</td><td>/foo/</td><td>/foo</td><td>Non</td></tr><tr><td>Prefix</td><td>/foo</td><td>/foo, /foo/</td><td>Oui</td></tr><tr><td>Prefix</td><td>/foo/</td><td>/foo, /foo/</td><td>Oui</td></tr><tr><td>Prefix</td><td>/aaa/bb</td><td>/aaa/bbb</td><td>Non</td></tr><tr><td>Prefix</td><td>/aaa/bbb</td><td>/aaa/bbb</td><td>Oui</td></tr><tr><td>Prefix</td><td>/aaa/bbb/</td><td>/aaa/bbb</td><td>Oui, ignore la barre oblique finale</td></tr><tr><td>Prefix</td><td>/aaa/bbb</td><td>/aaa/bbb/</td><td>Oui, correspond à la barre oblique finale</td></tr><tr><td>Prefix</td><td>/aaa/bbb</td><td>/aaa/bbb/ccc</td><td>Oui, correspond au sous-chemin</td></tr><tr><td>Prefix</td><td>/aaa/bbb</td><td>/aaa/bbbxyz</td><td>Non, ne correspond pas au préfixe de chaîne</td></tr><tr><td>Prefix</td><td>/, /aaa</td><td>/aaa/ccc</td><td>Oui, correspond au préfixe /aaa</td></tr><tr><td>Prefix</td><td>/, /aaa, /aaa/bbb</td><td>/aaa/bbb</td><td>Oui, correspond au préfixe /aaa/bbb</td></tr><tr><td>Prefix</td><td>/, /aaa, /aaa/bbb</td><td>/ccc</td><td>Oui, correspond au préfixe /</td></tr><tr><td>Prefix</td><td>/aaa</td><td>/ccc</td><td>Non, utilise le backend par défaut</td></tr><tr><td>Mixed</td><td>/foo (Prefix), /foo (Exact)</td><td>/foo</td><td>Oui, préfère Exact</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><strong>Exact</strong> : correspond au chemin URL exact.</li><li><strong>Prefix</strong> : correspond à la base d&#39;un préfixe de chemin URL.</li></ul></div>`,15);function g(u,E,b,f,m,y){const e=i("KubernetesIcon");return o(),a("div",null,[s("h1",h,[n(e,{icon:"/clusters/learning/kubernetes/icons/ing.svg",label:"Ingress",width:45,height:45}),r(),c]),k])}const F=t(p,[["render",g]]);export{v as __pageData,F as default};
